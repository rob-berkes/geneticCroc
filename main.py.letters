import random
import epdb
import string
import sys

MAXMATCHSIZE=100
GENERATIONS=1000
MUTATIONRATE=0.250
TABURATE=0.025
POOLSIZE=500
APPENDS=POOLSIZE
NUMRUNS=100

ENDRESULT="Rob Berkes"
ENDRESULT_LENGTH=len(ENDRESULT)

TC=0
 
MINDIST=999
MATCHLIST={}

CROSSLIMIT=3


def perform_xbreed(NUMLIST,FIRST_VALUE,SECOND_VALUE):
	FIRST_VALUE=str(FIRST_VALUE)
	SECOND_VALUE=str(SECOND_VALUE)
	XOVERSPOT=random.randint(0,len(FIRST_VALUE))
	HEADER=str(FIRST_VALUE[0:XOVERSPOT])
	FOOTER=str(SECOND_VALUE[XOVERSPOT+1:10]).zfill(10-XOVERSPOT)
	return str(HEADER)+str(FOOTER)

def zero_numlist(NUMLIST):
	for a in NUMLIST:
		NUMLIST[a]=0
	return NUMLIST

def finalize_dchanges(NUMLIST,NEWVALUES,OLDVALUES):
	for val in OLDVALUES:
		try:
			del(NUMLIST[val])
		except KeyError:
			pass
#DON'T REMOVE BELOW FOR LOOP IF YOURE GETTING THAT IDEA! 
	for a in NEWVALUES:
		NUMLIST[a]=0
	NUMLIST=zero_numlist(NUMLIST)
	return NUMLIST

def choose_swap_method(NUMLIST,MATCHLIST,row,APPENDS,NEWVALUES):
	try:
		SDEX=random.randint(0,int(len(MATCHLIST)-1))
	except :
		SDEX=0
	NEWSEED=SDEX
	if len(MATCHLIST) > 1:
		MUTATE=random.random()
		if MUTATE < MUTATIONRATE:
			NEWVALUES.append(mutate(NUMLIST,MATCHLIST,row))
			APPENDS+=1
		else:
			while NEWSEED==SDEX:
				NEWSEED=random.randint(0,int(len(MATCHLIST))-1)
			NEWVALUES.append(perform_xbreed(NUMLIST,row,MATCHLIST[NEWSEED]))
			APPENDS+=1
	else:
		NEWVALUES.append(mutate(NUMLIST,MATCHLIST,row))
		APPENDS+=1
	return NEWVALUES,APPENDS

def crossbreed(MINDIST,NUMLIST,MATCHLIST,APPENDS):
	NEWVALUES=[]
	OLDVALUES=[]
	for row in NUMLIST:
		if len(str(row)) > 10:
			OLDVALUES.append(row)
		elif len(str(row)) < 9:
			OLDVALUES.append(row)
		try:
			SDEX=random.randint(0,int(len(MATCHLIST))-1)
		except ValueError:
			SDEX=0
		if NUMLIST[row] > (MINDIST+CROSSLIMIT) :
			NEWVALUES,APPENDS=choose_swap_method(NUMLIST,MATCHLIST,row,APPENDS,NEWVALUES)
			OLDVALUES.append(row)
			APPENDS+=1 
		else:
			if random.random()<MUTATIONRATE:
				if in_matchlist(MATCHLIST,row):
					pass
				else:
					OLDVALUES.append(row)
					NEWVAL=mutate(NUMLIST,MATCHLIST,row)
					NEWVALUES.append(NEWVAL)
					APPENDS+=1
	NUMLIST=finalize_dchanges(NUMLIST,NEWVALUES,OLDVALUES)
	return NUMLIST,APPENDS,len(NEWVALUES),len(OLDVALUES)

def mutate(NUMLIST,MATCHLIST,row):
	SEED=random.randint(0,len(MATCHLIST)-1)
	FIRST_VALUE=str(MATCHLIST[SEED])
	MUTATESPOT=random.randint(0,8)
	NEWSPOT=MUTATESPOT+1
	NEWVAL=random.choice(string.printable)
	HEADER=FIRST_VALUE[0:MUTATESPOT]
	FOOTER=row[NEWSPOT:10].zfill(10-NEWSPOT)
	RETSTR=HEADER+str(NEWVAL)+FOOTER
	return RETSTR

def mutate_threep(NUMLIST,MATCHLIST,row):
	SEED=random.randint(0,len(MATCHLIST)-1)
	SEED2=random.randint(0,len(MATCHLIST)-1)
	while SEED2==SEED:
		SEED2=random.randint(0,len(MATCHLIST)-1)
	FIRST_VALUE=str(MATCHLIST[SEED])
	SECOND_VALUE=str(MATCHLIST[SEED2])
	MUTATESPOT1=random.randint(0,8)
	MUTATESPOT2=random.randint(MUTATESPOT1,len(row))
	HEADER=FIRST_VALUE[0:MUTATESPOT1]
	SECOND=SECOND_VALUE[MUTATESPOT1:MUTATESPOT2]
	FOOTER=row[MUTATESPOT2:10].zfill(10-MUTATESPOT2)
	RETSTR=HEADER+SECOND+FOOTER
			
	return RETSTR

def letter_count(itemL,resultL):
	COUNT=1
	NEWLIST={}
	for a in string.printable:
		NEWLIST[a]=COUNT
		COUNT+=1
	NEWLIST[' ']=53
	NEWLIST['0']=54
	return int(abs(NEWLIST[itemL]-NEWLIST[resultL])) 
def calc_distances(NUMLIST):
	TOTDISTANCE=0
	DISTANCE=0
	NUMLIST=zero_numlist(NUMLIST)
	for item in NUMLIST:
		DISTANCE=0
		for a in range(0,len(item)-1):
			DISTANCE+=letter_count(item[a],ENDRESULT[a])
		NUMLIST[item]=DISTANCE
		TOTDISTANCE+=DISTANCE
	return NUMLIST,TOTDISTANCE
def choose_to_add(MATCHLIST,row,COUNT):
	INLIST=False
	try:
		for a in MATCHLIST:
			if a == row:
				INLIST=True
	except TypeError:
		MATCHLIST=[]
	if INLIST:
		pass
	else:
		MATCHLIST.append(row)
		COUNT+=1

	return MATCHLIST,COUNT
def in_matchlist(MATCHLIST,row):
	found=False
	for a in MATCHLIST:
		if a==row:
			found=True
	return found

def trim_matchlist(NUMLIST,MATCHLIST,newlow):
	limit=newlow+2
	newlist=[]
	for a in MATCHLIST:
		try:
			if NUMLIST[a] < limit:
				newlist.append(a)			 
		except KeyError:
			pass
	return newlist
def find_best(NUMLIST,MINDIST,MATCHLIST,OLDLOW):
	COUNT=0
	for row in NUMLIST:
		if COUNT > MAXMATCHSIZE :
			break
		if len(row)==10:
			if NUMLIST[row] < MINDIST:
				MATCHLIST=trim_matchlist(NUMLIST,MATCHLIST,NUMLIST[row])
				OLDLOW=MINDIST
				MINDIST=NUMLIST[row]
				MATCHLIST.append(row)
				COUNT=1
			elif NUMLIST[row] <= MINDIST+1:
				MATCHLIST,COUNT=choose_to_add(MATCHLIST,row,COUNT)
	return MINDIST,COUNT,MATCHLIST,OLDLOW
	
def gen_initial_numbers(ENDRESULT_LENGTH):
	for a in range(0,POOLSIZE+5):
		NEWSTR="".join(random.choice(string.printable) for i in range(ENDRESULT_LENGTH))
		NUMLIST[NEWSTR]=0

	return NUMLIST
def gen_new_members(NUMLIST,POOLSIZE,CURSIZE,MATCHLIST):
	TOTAL=0
	ml_LENGTH=len(MATCHLIST)
	ml_SPOT=random.randint(0,9)
	for a in range(CURSIZE,POOLSIZE+1):
		ml_SPOT=random.randint(0,9)
		if ml_LENGTH>1:
			SDEX2=random.randint(0,len(MATCHLIST)-1)
			NEWVAL=mutate(NUMLIST,MATCHLIST,MATCHLIST[SDEX2])
			NUMLIST[NEWVAL]=0
			TOTAL+=1
		else:
			NEWSTR="".join(random.choice(string.printable) for i in range(ENDRESULT_LENGTH))
			NUMLIST[NEWSTR]=0
			TOTAL+=1
	return NUMLIST,TOTAL
def print_matches(NUMLIST,MINDIST):
	for row in NUMLIST:
		if NUMLIST[row]==MINDIST:
			print row+'\n'

	return





RUNCOUNT=0
OFILE=open("results.log.letters","a")
RUNCOUNT+=1
APPENDS=0
FOUND=False
NUMLIST={}
MATCHLIST=[]
MINDIST=100
NUMLIST=gen_initial_numbers(ENDRESULT_LENGTH)
NUMLIST,TOTDISTANCE=calc_distances(NUMLIST)
CHANGETOTAL=0
OLDLOW=0
random.seed()
MINDIST,COUNT,MATCHLIST,OLDLOW=find_best(NUMLIST,MINDIST,MATCHLIST,OLDLOW)
for generation in range(0,GENERATIONS):
	print "starting Gen: "+str(generation)
	NUMLIST,TOTDISTANCE=calc_distances(NUMLIST)
	MINDIST,COUNT,MATCHLIST,OLDLOW=find_best(NUMLIST,MINDIST,MATCHLIST,OLDLOW)
	NUMLIST,APPENDS,LENNEW,LENOLD=crossbreed(MINDIST,NUMLIST,MATCHLIST,APPENDS)
	if len(NUMLIST) < POOLSIZE:
		NUMLIST,CHANGETOTAL=gen_new_members(NUMLIST,POOLSIZE,len(NUMLIST),MATCHLIST)
	for a in MATCHLIST:
		if FOUND==True:
			break
		if str(a)==ENDRESULT:
			FOUND=True
			OFILE.write(str(generation)+","+str(APPENDS)+","+str(MUTATIONRATE)+","+str(TABURATE)+","+str(POOLSIZE)+","+str(MAXMATCHSIZE)+"\n")
			print str(RUNCOUNT)+", MATCH! Gen: "+str(generation)+", Numbers: "+str(APPENDS)+", NV: "+str(LENNEW)+" OV: "+str(LENOLD)+" NUMLIST: "+str(len(NUMLIST))+", MATCHLIST: "+str(len(MATCHLIST))+", OLDLOW: "+str(OLDLOW)+" MINDIST:"+str(MINDIST)+", RANDOM: "+str(CHANGETOTAL)+", TABU:"+str(TABURATE)+", POOLSIZE:"+str(POOLSIZE)+", MUTATE: "+str(MUTATIONRATE)
	if FOUND==True:
		break
	elif generation>=(GENERATIONS-1):
		OFILE.write(str(MATCHLIST)+str(MINDIST))
		OFILE.write(str(generation)+",0,"+str(MUTATIONRATE)+","+str(TABURATE)+","+str(POOLSIZE)+","+str(MAXMATCHSIZE)+"\n")

			

OFILE.close()
